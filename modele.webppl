///fold:
// print function 'condProb2Table' for conditional probability tables
var condProb2Table = function(condProbFct, row_names, col_names, 
precision){
  var matrix = map(function(row) {
    map(function(col) {
      _.round(Math.exp(condProbFct(row).score(col)),precision)}, 
        col_names)}, 
                   row_names)
  var max_length_col = _.max(map(function(c) {c.length}, col_names))
  var max_length_row = _.max(map(function(r) {r.length}, row_names))
  var header = _.repeat(" ", max_length_row + 2)+ col_names.join("  ") + 
"\n"
  var row = mapIndexed(function(i,r) { _.padEnd(r, max_length_row, " ") 
+ "  " + 
                       mapIndexed(function(j,c) {
                          _.padEnd(matrix[i][j], c.length+2," ")}, 
                                  col_names).join("") + "\n" }, 
                           row_names).join("")
  return header + row
}
// This function constructs the list of possible personae
var listPersonae = function(universe,relation) {
  //Auxiliary function to iterate over the list
  var fun = function(universe,relation,index1,index2,list) {
    if (index1 === 0) {
      return list;
    }
    else if (index2 === -1) {
      return fun(universe,relation,index1-1,index1-2,list);
    }
    // If the two universes are not antagonists, add to the list
    else if ( relation[universe[index1]] !== universe[index2] 
             && relation[universe[index2]] !== universe[index1]) {
      list.push([universe[index1],universe[index2]]);
      return fun(universe,relation,index1,index2-1,list);
    }
    else  {
      return fun(universe,relation,index1,index2-1,list);
    }
  }
  var size = universe.length;
  return fun(universe,relation,size-1,size-2,[]);
}
var isIn = function(val,arr) {
  return arr.indexOf(val) > -1;
}
///

/// PARAMETERS ///


// List here the set of properties
var universe = ['competent','incompetent','friendly','aloof'];

// List here the relations of incompability
var relation = 
    { 'competent':'incompetent',
      'friendly':'aloof'
    };
// [["incompetent","aloof"],["incompetent","friendly"]...]
var parsedPersonae = listPersonae(universe,relation);
// ["aloof-incompetent","friendly-incompetent",...]
var personae = map(function(x) { return x.join("-")},parsedPersonae);
// Possible utterances
var utterances = ["ing","in"];

// Cost of uttering a message
var cost = function(utterance){
  var table = {
    in:0,
    ing:0
  };
  return table[utterance];
};

// Temperature for the speaker, high temparature means deterministic
// choice for the speaker to chose a message given a persona.
// Low value allows for more variation.
var temperature = 6;
// Temperature for chosing a persona, according to the payoff function
var personaTemperature = 6;

// Payoff function for selecting a persona
// PROBLEM: You have to get the same struct and order than the one
// that personae gives you.
var muFunction = function(persona) {
  var table = {
    "friendly-competent":6,
    "aloof-competent":4,
    "friendly-incompetent":4,
    "aloof-incompetent":0
  };
  return table[persona];
}

//  Prior distribution of the listener on the personae of the speaker
var personaPrior = function(prior) {
  if (prior==="uniform") {
    uniformDraw(personae);
  }
  else {
    var prior = prior || [0.3,0.3,0.2,0.2];
    categorical({
      ps:prior,
      vs:personae
  })
  }
};

var eckertFields = {
  ing:['competent','aloof'],
  in:['incompetent','friendly']
};
// Return the EM Field of an utterance based on the eckertFields var
var getEMField = cache(function(utt) {
  var EMField = filter(function(x) { 
    return _.intersection(eckertFields[utt],x).length !== 0;
  },parsedPersonae);
  return map(function(el) {return el.join("-")},EMField);
});

///  END OF PARAMETERS  ///

/// MODEL FUNCTIONS ///

//Pr(P|m) > listener prior belief in a persona given a message
var conditPrior = function(utterance,prior) {
  Infer({model: function() {
    var persona = personaPrior(prior);
    var uttTruthVal = isIn(persona,getEMField(utterance));
    condition(uttTruthVal == true)
    return persona
  }})
};

// P_PERS(P) > Probability of chosing a persona
var persDistribution = function() {
  Infer({model: function() {
    var persona = uniformDraw(personae);
    factor(personaTemperature * muFunction(persona))
    return persona;
  }})
}

//Ps(m|P) > speaker probability of using m given they want to construct P
//var speaker = function(personality,{tempOpt:temp,priorOpt:prior}) {
var speaker = function(persona,option) {
  var temp = (option === undefined || option.tempOpt === undefined) ? temperature : option.tempOpt;
  var prior = (option === undefined || option.priorOpt === undefined) ? undefined : option.priorOpt;
  
  Infer({model: function() {
    var utterance = uniformDraw(utterances);
    factor(temp * (conditPrior(utterance,prior).score(persona) - cost(utterance)))
    return utterance;
  }})
};


// P_S(m) > Probability of a speaker of uttering a message
var speakerDistrib = function(utterance) {
  return sum(map(
    function(persona) {
      return Math.exp(persDistribution().score(persona)+speaker(persona).score(utterance));
    },personae));
}

// P_L(P|m)
var listener = function(utterance) {
  Infer({model: function() {
    var persona = personaPrior()
    observe(speaker(persona),utterance)
    return persona
  }})
}


/// END OF MODEL ///


// Return an array composed of all the integers from a to b (both 
// included)
var rangeN = function(a,b) {
  if (b<a) {
    console.error("rangeN : B should not be inferior to A")
  }
  var aux = function(a,b,acc) {
    acc.push(a);
    b == a ? acc : aux(a+1,b,acc);
  }
  return aux(a,b,[]);
}
// Return a distribution with salient persona with probability p
// and others equally probable
var salientPersonaDis = function(p,salientPersona) {
  if(!isIn(salientPersona,personae)) {
    console.error("The salient persona is not a valid persona");
  }
  if( (p<0) || (p>1) ) {
    console.error("The salient persona probability must be between 0 and 1");
  } 
  
  var aux = function(persona) {
    if (persona === salientPersona) {
      return p
    }
    else {
      return (1-p) / (personae.length-1) ;
    }
  }  
  
  return map(aux,personae);
}
// Return a distribution with all persona with a salient property 
// equally probable
// and others also equally probable
var salientPropertyDis = function(p,salientProperty) {
  if( (p<0) || (p>1) ) {
    console.error("The salient persona probability must be between 0 and 1");
  } 
  var count = function() {
    return filter(function(x){return isIn(salientProperty,x)},personae).length;
  } ();
  if(count === 0) {
    console.error("No persona with that property was found.")
  }
  var aux = function(persona) {
    if (isIn(salientProperty,persona)) {
      return p/ count;
    }
    else {
      return (1-p) / (personae.length-count);
    }
  }  
  return map(aux,personae);
}


var speakerPersPriorPlot = function(utterance,persona,varPersona,minBound,maxBound) 
{
  var minBound = minBound || 1;
  var maxBound = maxBound || 99;
  
  var pValues = map(function(x){ return x/100},rangeN(minBound,maxBound));
  var xValues = map(function(p) { return salientPersonaDis(p,persona)},pValues);
  
  var y = map(
  function(x) {
    return Math.exp(speaker(persona,{priorOpt:x}).score(utterance));},xValues);
  viz.line(pValues,y,{xLabel:"Prior",yLabel:"Ps(m|p)"});  
};

var speakerPropPriorPlot = function(utterance,persona,property,minBound,maxBound) 
{
  var minBound = minBound || 1;
  var maxBound = maxBound || 99;

  var pValues = map(function(x){ return x/100},rangeN(minBound,maxBound));
  var xValues = map(function(p) { return salientPropertyDis(p,property)},pValues);
  
  var y = map(
  function(x) {
    return Math.exp(speaker(persona,{priorOpt:x}).score(utterance));},xValues);
  viz.line(pValues,y,{xLabel:"Prior",yLabel:"Ps(m|p)"});  
};



// Plot the speaker probability of uttering m for different values of temperature
// minBound and maxBoud are optional parameters for min and max value of 
// temperature
// They are set by default to 1 and 50 respectively
// Future implementation: plot for each m or p ?
// Should check that maxBound > minBound
var speakerTempPlot = function(utterance,persona,minBound,maxBound) 
{
  var minBound = minBound || 0;
  var maxBound = maxBound || 50;
  
  var tempValues = rangeN(minBound,maxBound);
  
  var y = map(
  function(x) {
    var S = speaker(persona,{tempOpt:x}).score(utterance);
    return (S === null) ? 0 : Math.exp(S);},
    tempValues);
  
  viz.line(tempValues,y,{xLabel:"Temperature",yLabel:"Ps(m|p)"});  
};




/// MODEL PRESENTATION

print("List of personae and their prior probabilities:");
viz.table(Infer({method:'enumerate'},personaPrior));
print('');



/// Pr(P|m)

print("Visualization 1:")
display("L's prior belief about S to chose a persona after hearing m")
display(condProb2Table(conditPrior,utterances,personae,2))

print("Vizualization 2:")
print("Listener belief of a persona after hearing 'ing':");
viz.hist(conditPrior("ing"));
print("Listener belief of a persona after hearing 'in':");
viz.table(conditPrior("in"));

/// Ps(m|P)
display("Probability of S to use a message given a persona she wants to build:")
display(condProb2Table(speaker,personae,utterances,2));




print("Plot of the probability of uttering 'ing' given she wants to be")
print("friendly and incompetent, for different temperatures")
speakerTempPlot("ing","friendly-competent");

print("Plot of the probability of uttering 'in' given that she wants to be");
print("aloof and incompetent, for different priors of being aloof.");
speakerPropPriorPlot("in","aloof-incompetent","aloof");


//P_PERS(P)
display("");
display("Probability distribution of chosing a persona :");
viz.table(persDistribution());

//P_S(m)
print("Probability of speaker uttering 'in': ");
print(speakerDistrib("in"));
print("Probability of speaker uttering 'ing': ");
print(speakerDistrib("ing"));
print("");

//P_L(P|m)
print("L's beliefs about a persona after hearing m (here in)");
viz(listener("in"));
display(condProb2Table(listener,utterances,personae,2));

